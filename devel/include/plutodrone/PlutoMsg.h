// Generated by gencpp from file plutodrone/PlutoMsg.msg
// DO NOT EDIT!


#ifndef PLUTODRONE_MESSAGE_PLUTOMSG_H
#define PLUTODRONE_MESSAGE_PLUTOMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace plutodrone
{
template <class ContainerAllocator>
struct PlutoMsg_
{
  typedef PlutoMsg_<ContainerAllocator> Type;

  PlutoMsg_()
    : rcRoll(0)
    , rcPitch(0)
    , rcYaw(0)
    , rcThrottle(0)
    , rcAUX1(0)
    , rcAUX2(0)
    , rcAUX3(0)
    , rcAUX4(0)
    , plutoIndex(0)  {
    }
  PlutoMsg_(const ContainerAllocator& _alloc)
    : rcRoll(0)
    , rcPitch(0)
    , rcYaw(0)
    , rcThrottle(0)
    , rcAUX1(0)
    , rcAUX2(0)
    , rcAUX3(0)
    , rcAUX4(0)
    , plutoIndex(0)  {
  (void)_alloc;
    }



   typedef int64_t _rcRoll_type;
  _rcRoll_type rcRoll;

   typedef int64_t _rcPitch_type;
  _rcPitch_type rcPitch;

   typedef int64_t _rcYaw_type;
  _rcYaw_type rcYaw;

   typedef int64_t _rcThrottle_type;
  _rcThrottle_type rcThrottle;

   typedef int64_t _rcAUX1_type;
  _rcAUX1_type rcAUX1;

   typedef int64_t _rcAUX2_type;
  _rcAUX2_type rcAUX2;

   typedef int64_t _rcAUX3_type;
  _rcAUX3_type rcAUX3;

   typedef int64_t _rcAUX4_type;
  _rcAUX4_type rcAUX4;

   typedef int64_t _plutoIndex_type;
  _plutoIndex_type plutoIndex;





  typedef boost::shared_ptr< ::plutodrone::PlutoMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plutodrone::PlutoMsg_<ContainerAllocator> const> ConstPtr;

}; // struct PlutoMsg_

typedef ::plutodrone::PlutoMsg_<std::allocator<void> > PlutoMsg;

typedef boost::shared_ptr< ::plutodrone::PlutoMsg > PlutoMsgPtr;
typedef boost::shared_ptr< ::plutodrone::PlutoMsg const> PlutoMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plutodrone::PlutoMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plutodrone::PlutoMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace plutodrone

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'plutodrone': ['/home/supastrikaromil/catkin_ws/src/pluto_drone/plutodrone/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::plutodrone::PlutoMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plutodrone::PlutoMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plutodrone::PlutoMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plutodrone::PlutoMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plutodrone::PlutoMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plutodrone::PlutoMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plutodrone::PlutoMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f7fa0d15465731dd6d5e23cfeac6edf4";
  }

  static const char* value(const ::plutodrone::PlutoMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf7fa0d15465731ddULL;
  static const uint64_t static_value2 = 0x6d5e23cfeac6edf4ULL;
};

template<class ContainerAllocator>
struct DataType< ::plutodrone::PlutoMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plutodrone/PlutoMsg";
  }

  static const char* value(const ::plutodrone::PlutoMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plutodrone::PlutoMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 rcRoll\n\
int64 rcPitch\n\
int64 rcYaw\n\
int64 rcThrottle\n\
int64 rcAUX1\n\
int64 rcAUX2\n\
int64 rcAUX3\n\
int64 rcAUX4\n\
int64 plutoIndex\n\
";
  }

  static const char* value(const ::plutodrone::PlutoMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plutodrone::PlutoMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rcRoll);
      stream.next(m.rcPitch);
      stream.next(m.rcYaw);
      stream.next(m.rcThrottle);
      stream.next(m.rcAUX1);
      stream.next(m.rcAUX2);
      stream.next(m.rcAUX3);
      stream.next(m.rcAUX4);
      stream.next(m.plutoIndex);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlutoMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plutodrone::PlutoMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::plutodrone::PlutoMsg_<ContainerAllocator>& v)
  {
    s << indent << "rcRoll: ";
    Printer<int64_t>::stream(s, indent + "  ", v.rcRoll);
    s << indent << "rcPitch: ";
    Printer<int64_t>::stream(s, indent + "  ", v.rcPitch);
    s << indent << "rcYaw: ";
    Printer<int64_t>::stream(s, indent + "  ", v.rcYaw);
    s << indent << "rcThrottle: ";
    Printer<int64_t>::stream(s, indent + "  ", v.rcThrottle);
    s << indent << "rcAUX1: ";
    Printer<int64_t>::stream(s, indent + "  ", v.rcAUX1);
    s << indent << "rcAUX2: ";
    Printer<int64_t>::stream(s, indent + "  ", v.rcAUX2);
    s << indent << "rcAUX3: ";
    Printer<int64_t>::stream(s, indent + "  ", v.rcAUX3);
    s << indent << "rcAUX4: ";
    Printer<int64_t>::stream(s, indent + "  ", v.rcAUX4);
    s << indent << "plutoIndex: ";
    Printer<int64_t>::stream(s, indent + "  ", v.plutoIndex);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLUTODRONE_MESSAGE_PLUTOMSG_H
